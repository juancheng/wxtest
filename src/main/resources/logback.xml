<?xml version="1.0" encoding="UTF-8" ?>
<!--
　  scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
　　 scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
    -->
<configuration
        debug="false">
    <!-- 1.定义日志文件的存储位置 -->
    <property name="LOG_HOME" value="./logs"/>

    <!-- 2.控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!-- 格式化输出:%d表示日期，%thread表示线程名，%-5level表示级别从左显示5个字符宽度，
            %msg表示日志消息，%n表示换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss:SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </encoder>
    </appender>
    <!-- 3.按照每日生成日志文件 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 日志输出的文件名 -->
            <FileNamePattern>
                ${LOG_HOME}/runtime.log.%d{yyyy-MM-dd}.log
            </FileNamePattern>
            <!-- 最大保留天数 -->
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!-- 格式化输出:%d表示日期，%thread表示线程名，%-5level表示级别从左显示5个字符宽度，
            %msg表示日志消息，%n表示换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss:SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </encoder>
        <!-- -->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>10MB</MaxFileSize>
        </triggeringPolicy>
    </appender>
    <!-- 4.设置日志文件的输出级别 TRACE DEBUG INFO WARN ERROR -->
    <root level="INFO">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="FILE"/>
    </root>
</configuration>